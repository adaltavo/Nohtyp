package NohtypPackage;

import java.io.*;

import java.lang.*;

import java_cup.runtime.*;

import java_cup.runtime.Symbol;

import java.util.ArrayList;

import java.util.*;


action code{:
static boolean eval=true;

void print(String msj)
 
   {System.out.println(msj);}


:}


parser code {:



public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

Ventana.error("Error fatal, verifica que todas las instrucciones entre llaves '{}' esten cerradas, no se puede seguir analizando");


System.out.println(" ");
 }

public void syntax_error(Symbol s){
/* Ventana.error("ERROR SINTAXIS: Se encontro un error en la linea: "+(s.right+1)+" antes de: '"+s.value+"', revisa la estructura de tu programa en esa sección"); */
}



public void semantic(Symbol cur_token,String n)
{
System.out.println("Error Semantico ");
  }

public void report_error(String message, Object info){
	System.out.println(message);
}

public void semantic(String msg, Object obj) {
System.out.println(msg);
}

:};


terminal txinput, tfalse, ttrue, tand, telif, telse, tfor,
    tif, tin, 
    tnot, twhile,tcomentarios, tmas, tmenos, tpor, tentre, tmodulo, tigualque,
    tdiferente, tigualmenor, tigualmayor, tigual,
    tabre, tcierra, tabrec, tcierrac, tabrep, tcierrap, tcoma, tor, tmenor, tmayor, tpuntos, tpunto, trange, tpuntocoma, tinput, tprint, tstr,tarray, txarray;

terminal String tid, tint, treal , tstring, tchar;

non terminal LISTA,COND3,LOG,A,CORC, SINT, IF, WHI, FOR, ASIG, ABRECIERRA, SAL, ENT, EXP, COND, COND2, TCOND, OPL, OPREL, REL, TERM, EXP2, TERM2, FAC ;

start with SINT;

SINT ::=  ASIG SINT
| SAL SINT 
| ENT SINT 
| WHI SINT 
| FOR SINT 
| IF SINT 
| error:e1{:Ventana.error("Error en la linea: "+(e1right+1)+", existe una instrucción inválida en la linea, revisa tu código");:} SINT 
| LISTA SINT
|
;

LISTA::= tid:h tarray tfor tint tpuntocoma {: TablaDS.Insertar("String",h,0,"tipo",""); :}
| tid:h txarray tfor tint tpuntocoma  {: TablaDS.Insertar("Integer",h,0,"tipo",""); :}
| tid:h tarray tfor tid:a tpuntocoma {:
   TablaDS.Insertar("String",h,0,"tipo",""); TablaDS.ValidarTipo(a,aright+1,"Integer"); :}
| tid:h txarray tfor tid:a  tpuntocoma {:
   TablaDS.Insertar("Integer",h,0,"tipo",""); TablaDS.ValidarTipo(a,aright+1,"Integer"); :}
| tid:h tarray error:e3 {:Ventana.error("Error en la linea: "+(e3right+1)+", declaración inválida del arreglo '"+h+"'");:}
| tid:h txarray error:e3 {:Ventana.error("Error en la linea: "+(e3right+1)+", declaración inválida del arreglo '"+h+"'");:}
;


COND2::= COND | tid:a {:TablaDS.ValidarTipo(a,aright+1,"Boolean");:};

IF::= tif COND2 tpuntos ABRECIERRA 
| tif COND2 tpuntos ABRECIERRA telse tpuntos ABRECIERRA 
| tif COND2 tpuntos ABRECIERRA telif COND2 tpuntos ABRECIERRA
| tif error:e3 {:Ventana.error("Error en la linea: "+(e3right+1)+", falta la condicion seguido de sus respectivos ':' en un if ");:} 
| tif COND2 error:e3{:Ventana.error("Error en la linea: "+(e3right+1)+", faltan los ':' en un if ");:} 
| tif error:e3 tpuntos ABRECIERRA {:Ventana.error("Error en la linea: "+(e3right+1)+", condicion invalida en un if ");:} 
|  error:e3 telse {:Ventana.error("Error en la linea: "+(e3right+1)+", Hay un 'else' sin un if ");:}
| error:e3 telif {:Ventana.error("Error en la linea: "+(e3right+1)+", Hay un 'elif' sin un if ");:}
| tif COND2 tpuntos ABRECIERRA telse error:e3 ABRECIERRA {:Ventana.error("Error en la linea: "+(e3right+1)+", falta los puntos  ':' en un else ");:}
| tif COND2 tpuntos ABRECIERRA telif error:e3 tpuntos ABRECIERRA {:Ventana.error("Error en la linea: "+(e3right+1)+", condicion invalida en un 'elif' ");:}
| tif COND2 tpuntos ABRECIERRA telif COND2 error:e3{:Ventana.error("Error en la linea: "+(e3right+1)+", faltan los ':' en un elif ");:}
| tif COND2 tpuntos ABRECIERRA telif error:e3{:Ventana.error("Error en la linea: "+(e3right+1)+", faltan la condicion seguido de ':' en un elif ");:}
;

WHI::= twhile COND2 tpuntos ABRECIERRA 
| twhile error:e8{:Ventana.error("Error en la linea: "+(e8right+1)+", falta la condicion seguido de sus respectivos ':' en un ciclo while ");:} ;

FOR::= tfor tint:h tin trange tabrep EXP:q tcierrap tpuntos ABRECIERRA {:TablaDS.ValidarExTipo(q,qright+1,"Integer");
if(h.toString().equals("0"))
Ventana.error("Error en la linea: "+(hright+1)+", estructura incorrecta de un ciclo for, el '0' no esta permitido alli, revise su código");
:}
| tfor error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, se esperaba un entero despues de 'for', revise su código");:}
| tfor tint tin error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la palabra 'range' despues de 'in'");:} tabrep EXP tcierrap tpuntos ABRECIERRA
| tfor tint tin trange tabrep EXP tcierrap error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta ':' despues de 'range(expresion)'");:} ABRECIERRA 
/* | tfor tint tin trange error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta '(' despues de 'range'");:} EXP tcierrap tpuntos ABRECIERRA   */
| tfor tint tin trange tabrep EXP error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta ')' despues de 'range(expresion'");:} tpuntos ABRECIERRA 
| tfor tint tin trange tabrep error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta 'expresion' en la estructura 'range(expresion)'");:} tcierrap tpuntos ABRECIERRA 
| tfor tint tin trange tabrep error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta 'expresion' en la estructura 'range(expresion)'");:} 
| tfor tint tin error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la palabra 'range' despues de 'in'");:}
| tfor tint tin trange error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la expresion entre parentesis: 'range(expresion)' despues de 'in'");:} tpuntos ABRECIERRA
| tfor tint tin trange error:e9{:Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la expresion entre parentesis: 'range(expresion)' despues de 'in'");:} 

;


A::= tid:a {:TablaDS.ValidarTipo(a,aright+1,"Integer");:}| tint ;


ASIG ::= tid:h tigual EXP:q tpuntocoma {:
if(q!=null)if(!q.toString().matches("[a-zA-z]*"))TablaDS.ValidarExTipo(q,hright+1,"Num");
TablaDS.Insertar("Integer",h,0,"tipo","");TablaDS.Insertar(q,h,hright+1,"valor","Num");  :} 
| tid:h tigual COND:q tpuntocoma {:TablaDS.Insertar("Boolean",h,0,"tipo",""); print(h.getClass().getSimpleName()); TablaDS.Insertar(q,h,hright+1,"valor","Boolean");:} 
| tid:hue tigual tstring:q {:TablaDS.Insertar("String",hue,0,"tipo",""); TablaDS.Insertar(q,hue,hueright+1,"valor","String");:} tpuntocoma 
| tid:h tigual tabrec CORC tcierrac tpuntocoma {:TablaDS.Insertar("Lista",h,0,"tipo","");:}
|tid tigual error:e6{:Ventana.error("Error en la linea: "+(e6right+1)+", hacen falta ';' ");:}
| tid:a tigual tabrec error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", la estructura de la declaracion de la lista '"+a+"' no es valida ");:} 
| tid:h tigual error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", asignación a '"+h+"'' no valida");:}  tpuntocoma 
| tigual error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", uso incorrecto de '=' ");:}
| tid:h tigual ENT:q {:
if(q.toString().equals("xinput"))
TablaDS.Insertar("Integer",h,0,"tipo","");
else
TablaDS.Insertar("String",h,0,"tipo","");
:}
;

CORC::= tid | tint | treal
| tid tcoma CORC 
| tstring 
| tstring tcoma CORC 
| tint tcoma CORC
| treal tcoma CORC
;


ABRECIERRA ::= tabre SINT tcierra 
| error:e2{:Ventana.error("Error en la linea: "+(e2right+1)+", Se esperan las instrucciones entre dos corchetes '{}' ");:} /* 
| tabre SINT error:e10{:Ventana.error("Error en la linea: "+(e10right+1)+", Se esperan las instrucciones entre dos corchetes '{}' ");:}    */
;


SAL ::= 
tprint tabrep EXP:a tcierrap tpuntocoma {:TablaDS.ValidarExTipo(a,aright+1,"Num");:}
| tprint tabrep tstring tcierrap tpuntocoma 
| tstr tabrep tid:a tcierrap tpuntocoma {:TablaDS.ValidarTipo(a,aright+1,"String");:}
| tstr tabrep tstring tcierrap tpuntocoma 

| tprint tabrep error:e11{:Ventana.error("Error en la linea: "+(e11right+1)+", hay instrucción 'print' incorrecta. Verifica su estructura y que haya un ';' al final");:}
| tprint tabrep error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", expresion entre parentesis no valida en en el 'print' ");:} tcierrap tpuntocoma 
| tprint tabrep tstring tcierrap error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", hace falta un ';' en una instruccion 'print' ");:}
| tstr tabrep error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", parametro invalido en el 'str', solo se aceptan Strings ");:} tcierrap tpuntocoma 
| tstr tabrep error:e12{:Ventana.error("Error en la linea: "+(e12right+1)+", hay instrucción 'str' incorrecta. Verifica su estructura y que haya un ';' al final ");:}
| tstr tabrep tstring tcierrap error:e15{:Ventana.error("Error en la linea: "+(e15right+1)+", hace falta un ';' en una instruccion 'str' ");:}
;

ENT ::= 
  tinput tabrep tstring tcierrap tpuntocoma {:RESULT="input";:}
| tinput tabrep tid:a {:RESULT="input";TablaDS.ValidarTipo(a,aright+1,"String"); :} tcierrap tpuntocoma 
| txinput tabrep tstring tcierrap tpuntocoma{:RESULT="xinput";:}
| txinput tabrep tid:a {:RESULT="xinput";TablaDS.ValidarTipo(a,aright+1,"String"); :} tcierrap tpuntocoma
| txinput error:e15{:RESULT="xinput"; Ventana.error("Error en la linea: "+(e15right+1)+", instruccion 'xinput' incompleta ");:}
| tinput error:e15{:RESULT="input"; Ventana.error("Error en la linea: "+(e15right+1)+", instruccion 'input' incompleta ");:}
;


COND ::= COND:a OPL:b REL:c  {:RESULT=a+" "+b+" "+c; :} 
| REL:a {:RESULT=a ;:} 
| COND OPL tid
;


/*TCOND ::= tnot COND | REL ;*/



REL ::= tabrep COND:a tcierrap {:RESULT="("+a+")";:}
| EXP:a OPREL:c EXP:b {:RESULT=a+""+c+""+b; 

boolean x=true;

if(a.toString().matches("[a-zA-z]*") && b.toString().matches("[a-zA-z]*")){
String op1=TablaDS.ObtenerTipo(a);
String op2=TablaDS.ObtenerTipo(b);
	
	if(op1.equals("String") && op2.equals("String") && (c.toString().equals("==") || c.toString().equals("!=")))
		x=false;

}
	


if(x){
TablaDS.ValidarExTipo(a,aright+1,"Integer"); 
TablaDS.ValidarExTipo(b,bright+1,"Integer");}




:}


| ttrue {:RESULT="True";:} 
| tfalse {:RESULT="False";:} 
| tnot REL:a {:RESULT="not "+a ;:} 
;

OPL ::= tand:a {:RESULT="and";:} 
| tor:a {:RESULT="or";:};

OPREL ::= tigualque:a {:RESULT="==";:} 
| tdiferente:a {:RESULT="!=";:} 
| tigualmenor:a {:RESULT="<=";:} 
| tigualmayor:a {:RESULT=">=";:} 
| tmayor:a {:RESULT=">";:} 
| tmenor:a {:RESULT="<";:} ;


LOG::= LOG:a OPL:b COND3:c | COND3:a | tnot COND3:b | ttrue | tfalse ;

COND3::= COND3:a OPREL:b COND:c | tid ;


/*ESTAS YA ESTAN BIEN*/
EXP ::= EXP:a tmas TERM:b {:RESULT=a+"+"+b;:} 
| EXP:a tmenos TERM:b {:RESULT=a+"-"+b;:} 
| TERM:b {:RESULT=b+"";:} 
/* | error:e4{:Ventana.error("Error en la linea: "+(e4right+1)+", Hay una expresion invalida, revisa tu código ");:} */
;

TERM ::= TERM:a tpor FAC:b {:RESULT=a+"*"+b;:} 
| TERM:a tentre FAC:b {:RESULT=a+"/"+b;:} 
| FAC:a {:RESULT=a;:} ;

FAC ::= tabrep EXP:a tcierrap {:RESULT="("+a+")";:} 
| tid:t {:RESULT=t; /* TablaDS.ValidarTipo(t,tright+1,"Integer");*/:} 
| tint:a {:RESULT=a;:} 
| treal:a {:RESULT=a;:} 

/* es una prueba, esta regla no valida x=-------1 que está mal
| tmenos FAC:a {:RESULT="-"+a;:}
*/

| tmenos tid:a {:RESULT="-"+a;:}
| tmenos tint:a {:RESULT="-"+a;:}
| tmenos treal:a {:RESULT="-"+a;:}
;







EXP2::= EXP2 tmas EXP | EXP2 tpor EXP | EXP2 tentre EXP | EXP2 tmenos EXP | tid | EXP ; 