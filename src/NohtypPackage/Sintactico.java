
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Dec 09 10:00:20 MST 2015
//----------------------------------------------------

package NohtypPackage;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Dec 09 10:00:20 MST 2015
  */
public class Sintactico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\205\000\002\002\004\000\002\007\004\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\032\002\000\002\007\005\000" +
    "\002\007\004\000\002\007\002\000\002\002\007\000\002" +
    "\002\007\000\002\002\007\000\002\002\007\000\002\002" +
    "\005\000\002\002\005\000\002\021\003\000\002\021\003" +
    "\000\002\010\006\000\002\010\011\000\002\010\012\000" +
    "\002\010\004\000\002\010\005\000\002\010\006\000\002" +
    "\010\004\000\002\010\004\000\002\010\011\000\002\010" +
    "\012\000\002\010\011\000\002\010\010\000\002\011\006" +
    "\000\002\011\004\000\002\012\013\000\002\012\004\000" +
    "\002\033\002\000\002\012\014\000\002\034\002\000\002" +
    "\012\014\000\002\035\002\000\002\012\014\000\002\036" +
    "\002\000\002\012\014\000\002\012\010\000\002\012\006" +
    "\000\002\037\002\000\002\012\012\000\002\012\007\000" +
    "\002\005\003\000\002\005\003\000\002\013\006\000\002" +
    "\013\006\000\002\040\002\000\002\013\007\000\002\013" +
    "\010\000\002\013\005\000\002\013\006\000\002\041\002" +
    "\000\002\013\007\000\002\013\004\000\002\013\005\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\005\000\002\006\003\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\014\005\000\002\014\003" +
    "\000\002\015\007\000\002\015\007\000\002\015\007\000" +
    "\002\015\007\000\002\015\005\000\002\042\002\000\002" +
    "\015\010\000\002\015\007\000\002\043\002\000\002\015" +
    "\010\000\002\015\005\000\002\015\007\000\002\016\007" +
    "\000\002\044\002\000\002\016\010\000\002\016\007\000" +
    "\002\045\002\000\002\016\010\000\002\016\004\000\002" +
    "\016\004\000\002\020\005\000\002\020\003\000\002\020" +
    "\005\000\002\025\005\000\002\025\005\000\002\025\003" +
    "\000\002\025\003\000\002\025\004\000\002\023\003\000" +
    "\002\023\003\000\002\024\003\000\002\024\003\000\002" +
    "\024\003\000\002\024\003\000\002\024\003\000\002\024" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\003\005\000" +
    "\002\003\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\003\000\002\026\005\000\002\026\005\000\002\026" +
    "\003\000\002\031\005\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\004\000\002\031\004\000" +
    "\002\031\004\000\002\027\005\000\002\027\005\000\002" +
    "\027\005\000\002\027\005\000\002\027\003\000\002\027" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\030\002\ufff7\003\012\004\015\012\004\013" +
    "\014\016\020\031\017\050\013\051\007\052\025\055\016" +
    "\001\002\000\006\003\301\056\302\001\002\000\032\002" +
    "\ufff7\003\012\004\015\012\004\013\014\016\020\031\017" +
    "\033\ufff7\050\013\051\007\052\025\055\016\001\002\000" +
    "\032\002\ufff7\003\012\004\015\012\004\013\014\016\020" +
    "\031\017\033\ufff7\050\013\051\007\052\025\055\016\001" +
    "\002\000\004\036\263\001\002\000\032\002\ufff7\003\012" +
    "\004\015\012\004\013\014\016\020\031\017\033\ufff7\050" +
    "\013\051\007\052\025\055\016\001\002\000\004\002\261" +
    "\001\002\000\036\002\ufffa\003\ufffa\004\ufffa\010\256\011" +
    "\255\012\ufffa\013\ufffa\016\ufffa\031\ufffa\033\ufffa\050\ufffa" +
    "\051\ufffa\052\ufffa\055\ufffa\001\002\000\006\003\244\036" +
    "\245\001\002\000\024\003\220\005\054\006\051\015\064" +
    "\021\046\036\052\055\053\056\050\057\060\001\002\000" +
    "\006\003\207\036\210\001\002\000\010\031\134\053\136" +
    "\054\135\001\002\000\004\003\133\001\002\000\024\003" +
    "\057\005\054\006\051\015\064\021\046\036\052\055\053" +
    "\056\050\057\060\001\002\000\032\002\ufff7\003\012\004" +
    "\015\012\004\013\014\016\020\031\017\033\ufff7\050\013" +
    "\051\007\052\025\055\016\001\002\000\032\002\ufff7\003" +
    "\012\004\015\012\004\013\014\016\020\031\017\033\ufff7" +
    "\050\013\051\007\052\025\055\016\001\002\000\032\002" +
    "\ufff7\003\012\004\015\012\004\013\014\016\020\031\017" +
    "\033\ufff7\050\013\051\007\052\025\055\016\001\002\000" +
    "\032\002\ufff7\003\012\004\015\012\004\013\014\016\020" +
    "\031\017\033\ufff7\050\013\051\007\052\025\055\016\001" +
    "\002\000\004\036\026\001\002\000\010\003\030\055\031" +
    "\060\027\001\002\000\004\037\037\001\002\000\034\002" +
    "\uffb0\003\uffb0\004\uffb0\012\uffb0\013\uffb0\016\uffb0\031\uffb0" +
    "\033\uffb0\037\uffb2\050\uffb0\051\uffb0\052\uffb0\055\uffb0\001" +
    "\002\000\004\037\032\001\002\000\004\047\033\001\002" +
    "\000\032\002\uffb8\003\uffb8\004\uffb8\012\uffb8\013\uffb8\016" +
    "\uffb8\031\uffb8\033\uffb8\050\uffb8\051\uffb8\052\uffb8\055\uffb8" +
    "\001\002\000\004\037\035\001\002\000\004\047\036\001" +
    "\002\000\032\002\uffb1\003\uffb1\004\uffb1\012\uffb1\013\uffb1" +
    "\016\uffb1\031\uffb1\033\uffb1\050\uffb1\051\uffb1\052\uffb1\055" +
    "\uffb1\001\002\000\006\003\040\047\041\001\002\000\032" +
    "\002\uffaf\003\uffaf\004\uffaf\012\uffaf\013\uffaf\016\uffaf\031" +
    "\uffaf\033\uffaf\050\uffaf\051\uffaf\052\uffaf\055\uffaf\001\002" +
    "\000\032\002\uffb7\003\uffb7\004\uffb7\012\uffb7\013\uffb7\016" +
    "\uffb7\031\uffb7\033\uffb7\050\uffb7\051\uffb7\052\uffb7\055\uffb7" +
    "\001\002\000\006\002\ufffe\033\ufffe\001\002\000\006\002" +
    "\000\033\000\001\002\000\006\002\ufff8\033\ufff8\001\002" +
    "\000\006\002\ufffc\033\ufffc\001\002\000\010\055\132\056" +
    "\131\057\130\001\002\000\042\003\uff8d\007\uff8d\020\uff8d" +
    "\021\uff8d\022\106\023\105\025\uff8d\026\uff8d\027\uff8d\030" +
    "\uff8d\037\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\047\uff8d" +
    "\001\002\000\042\003\uff87\007\uff87\020\uff87\021\uff87\022" +
    "\uff87\023\uff87\025\uff87\026\uff87\027\uff87\030\uff87\037\uff87" +
    "\041\uff87\042\uff87\043\uff87\044\uff87\047\uff87\001\002\000" +
    "\016\003\uffa1\007\uffa1\037\uffa1\041\uffa1\044\uffa1\047\uffa1" +
    "\001\002\000\022\005\054\006\051\015\064\021\046\036" +
    "\052\055\065\056\050\057\060\001\002\000\032\003\uffef" +
    "\020\uff88\021\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027" +
    "\uff88\030\uff88\042\uff88\043\uff88\044\uffef\001\002\000\016" +
    "\003\uffa0\007\uffa0\037\uffa0\041\uffa0\044\uffa0\047\uffa0\001" +
    "\002\000\016\003\uffa5\007\uffa5\037\uffa5\041\uffa5\044\uffa5" +
    "\047\uffa5\001\002\000\012\003\ufff0\007\122\041\120\044" +
    "\ufff0\001\002\000\032\002\uffe1\003\uffe1\004\uffe1\012\uffe1" +
    "\013\uffe1\016\uffe1\031\uffe1\033\uffe1\050\uffe1\051\uffe1\052" +
    "\uffe1\055\uffe1\001\002\000\042\003\uff86\007\uff86\020\uff86" +
    "\021\uff86\022\uff86\023\uff86\025\uff86\026\uff86\027\uff86\030" +
    "\uff86\037\uff86\041\uff86\042\uff86\043\uff86\044\uff86\047\uff86" +
    "\001\002\000\004\044\112\001\002\000\042\003\uff8a\007" +
    "\uff8a\020\uff8a\021\uff8a\022\uff8a\023\uff8a\025\uff8a\026\uff8a" +
    "\027\uff8a\030\uff8a\037\uff8a\041\uff8a\042\uff8a\043\uff8a\044" +
    "\uff8a\047\uff8a\001\002\000\022\020\074\021\067\025\077" +
    "\026\072\027\075\030\071\042\070\043\073\001\002\000" +
    "\022\005\054\006\051\015\064\021\046\036\052\055\065" +
    "\056\050\057\060\001\002\000\042\003\uff88\007\uff88\020" +
    "\uff88\021\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027\uff88" +
    "\030\uff88\037\uff88\041\uff88\042\uff88\043\uff88\044\uff88\047" +
    "\uff88\001\002\000\016\003\uff9f\007\uff9f\037\uff9f\041\uff9f" +
    "\044\uff9f\047\uff9f\001\002\000\014\021\046\036\100\055" +
    "\065\056\050\057\060\001\002\000\014\021\uff97\036\uff97" +
    "\055\uff97\056\uff97\057\uff97\001\002\000\014\021\uff99\036" +
    "\uff99\055\uff99\056\uff99\057\uff99\001\002\000\014\021\uff9b" +
    "\036\uff9b\055\uff9b\056\uff9b\057\uff9b\001\002\000\014\021" +
    "\uff98\036\uff98\055\uff98\056\uff98\057\uff98\001\002\000\014" +
    "\021\046\036\100\055\065\056\050\057\060\001\002\000" +
    "\014\021\uff9a\036\uff9a\055\uff9a\056\uff9a\057\uff9a\001\002" +
    "\000\014\021\046\036\100\055\065\056\050\057\060\001" +
    "\002\000\014\021\uff9c\036\uff9c\055\uff9c\056\uff9c\057\uff9c" +
    "\001\002\000\014\021\046\036\100\055\065\056\050\057" +
    "\060\001\002\000\022\003\uffa2\007\uffa2\020\074\021\067" +
    "\037\uffa2\041\uffa2\044\uffa2\047\uffa2\001\002\000\010\020" +
    "\074\021\067\037\103\001\002\000\042\003\uff89\007\uff89" +
    "\020\uff89\021\uff89\022\uff89\023\uff89\025\uff89\026\uff89\027" +
    "\uff89\030\uff89\037\uff89\041\uff89\042\uff89\043\uff89\044\uff89" +
    "\047\uff89\001\002\000\042\003\uff8f\007\uff8f\020\uff8f\021" +
    "\uff8f\022\106\023\105\025\uff8f\026\uff8f\027\uff8f\030\uff8f" +
    "\037\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\047\uff8f\001" +
    "\002\000\014\021\046\036\100\055\065\056\050\057\060" +
    "\001\002\000\014\021\046\036\100\055\065\056\050\057" +
    "\060\001\002\000\042\003\uff8c\007\uff8c\020\uff8c\021\uff8c" +
    "\022\uff8c\023\uff8c\025\uff8c\026\uff8c\027\uff8c\030\uff8c\037" +
    "\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\047\uff8c\001\002" +
    "\000\042\003\uff8b\007\uff8b\020\uff8b\021\uff8b\022\uff8b\023" +
    "\uff8b\025\uff8b\026\uff8b\027\uff8b\030\uff8b\037\uff8b\041\uff8b" +
    "\042\uff8b\043\uff8b\044\uff8b\047\uff8b\001\002\000\042\003" +
    "\uff8e\007\uff8e\020\uff8e\021\uff8e\022\106\023\105\025\uff8e" +
    "\026\uff8e\027\uff8e\030\uff8e\037\uff8e\041\uff8e\042\uff8e\043" +
    "\uff8e\044\uff8e\047\uff8e\001\002\000\006\003\113\032\114" +
    "\001\002\000\036\002\uffbb\003\uffbb\004\uffbb\010\uffbb\011" +
    "\uffbb\012\uffbb\013\uffbb\016\uffbb\031\uffbb\033\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\055\uffbb\001\002\000\030\003\012\004" +
    "\015\012\004\013\014\016\020\031\017\033\ufff7\050\013" +
    "\051\007\052\025\055\016\001\002\000\032\002\uffe2\003" +
    "\uffe2\004\uffe2\012\uffe2\013\uffe2\016\uffe2\031\uffe2\033\uffe2" +
    "\050\uffe2\051\uffe2\052\uffe2\055\uffe2\001\002\000\004\033" +
    "\117\001\002\000\036\002\uffbc\003\uffbc\004\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\016\uffbc\031\uffbc\033\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\055\uffbc\001\002\000\022\005\uff9d" +
    "\006\uff9d\015\uff9d\021\uff9d\036\uff9d\055\uff9d\056\uff9d\057" +
    "\uff9d\001\002\000\022\005\054\006\051\015\064\021\046" +
    "\036\052\055\123\056\050\057\060\001\002\000\022\005" +
    "\uff9e\006\uff9e\015\uff9e\021\uff9e\036\uff9e\055\uff9e\056\uff9e" +
    "\057\uff9e\001\002\000\042\003\uffa4\007\uffa4\020\uff88\021" +
    "\uff88\022\uff88\023\uff88\025\uff88\026\uff88\027\uff88\030\uff88" +
    "\037\uffa4\041\uffa4\042\uff88\043\uff88\044\uffa4\047\uffa4\001" +
    "\002\000\016\003\uffa6\007\uffa6\037\uffa6\041\uffa6\044\uffa6" +
    "\047\uffa6\001\002\000\010\007\122\037\127\041\120\001" +
    "\002\000\024\020\074\021\067\025\077\026\072\027\075" +
    "\030\071\037\103\042\070\043\073\001\002\000\016\003" +
    "\uffa3\007\uffa3\037\uffa3\041\uffa3\044\uffa3\047\uffa3\001\002" +
    "\000\042\003\uff83\007\uff83\020\uff83\021\uff83\022\uff83\023" +
    "\uff83\025\uff83\026\uff83\027\uff83\030\uff83\037\uff83\041\uff83" +
    "\042\uff83\043\uff83\044\uff83\047\uff83\001\002\000\042\003" +
    "\uff84\007\uff84\020\uff84\021\uff84\022\uff84\023\uff84\025\uff84" +
    "\026\uff84\027\uff84\030\uff84\037\uff84\041\uff84\042\uff84\043" +
    "\uff84\044\uff84\047\uff84\001\002\000\042\003\uff85\007\uff85" +
    "\020\uff85\021\uff85\022\uff85\023\uff85\025\uff85\026\uff85\027" +
    "\uff85\030\uff85\037\uff85\041\uff85\042\uff85\043\uff85\044\uff85" +
    "\047\uff85\001\002\000\032\002\uffc6\003\uffc6\004\uffc6\012" +
    "\uffc6\013\uffc6\016\uffc6\031\uffc6\033\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\055\uffc6\001\002\000\034\003\156\004\015\005" +
    "\054\006\051\015\064\021\046\034\153\036\052\050\013" +
    "\055\065\056\050\057\060\060\155\001\002\000\006\003" +
    "\146\012\145\001\002\000\006\003\140\012\137\001\002" +
    "\000\006\055\142\056\141\001\002\000\032\002\ufff2\003" +
    "\ufff2\004\ufff2\012\ufff2\013\ufff2\016\ufff2\031\ufff2\033\ufff2" +
    "\050\ufff2\051\ufff2\052\ufff2\055\ufff2\001\002\000\004\047" +
    "\144\001\002\000\004\047\143\001\002\000\032\002\ufff4" +
    "\003\ufff4\004\ufff4\012\ufff4\013\ufff4\016\ufff4\031\ufff4\033" +
    "\ufff4\050\ufff4\051\ufff4\052\ufff4\055\ufff4\001\002\000\032" +
    "\002\ufff6\003\ufff6\004\ufff6\012\ufff6\013\ufff6\016\ufff6\031" +
    "\ufff6\033\ufff6\050\ufff6\051\ufff6\052\ufff6\055\ufff6\001\002" +
    "\000\006\055\150\056\147\001\002\000\032\002\ufff1\003" +
    "\ufff1\004\ufff1\012\ufff1\013\ufff1\016\ufff1\031\ufff1\033\ufff1" +
    "\050\ufff1\051\ufff1\052\ufff1\055\ufff1\001\002\000\004\047" +
    "\152\001\002\000\004\047\151\001\002\000\032\002\ufff3" +
    "\003\ufff3\004\ufff3\012\ufff3\013\ufff3\016\ufff3\031\ufff3\033" +
    "\ufff3\050\ufff3\051\ufff3\052\ufff3\055\ufff3\001\002\000\032" +
    "\002\ufff5\003\ufff5\004\ufff5\012\ufff5\013\ufff5\016\ufff5\031" +
    "\ufff5\033\ufff5\050\ufff5\051\ufff5\052\ufff5\055\ufff5\001\002" +
    "\000\014\003\171\055\173\056\172\057\170\060\167\001" +
    "\002\000\024\020\074\021\067\025\077\026\072\027\075" +
    "\030\071\042\070\043\073\047\166\001\002\000\004\047" +
    "\uffcd\001\002\000\034\002\uffca\003\uffca\004\uffca\012\uffca" +
    "\013\uffca\016\uffca\031\uffca\033\uffca\047\uffc8\050\uffca\051" +
    "\uffca\052\uffca\055\uffca\001\002\000\010\007\122\041\120" +
    "\047\161\001\002\000\032\002\uffc5\003\uffc5\004\uffc5\012" +
    "\uffc5\013\uffc5\016\uffc5\031\uffc5\033\uffc5\050\uffc5\051\uffc5" +
    "\052\uffc5\055\uffc5\001\002\000\032\002\uffce\003\uffce\004" +
    "\uffce\012\uffce\013\uffce\016\uffce\031\uffce\033\uffce\050\uffce" +
    "\051\uffce\052\uffce\055\uffce\001\002\000\004\047\163\001" +
    "\002\000\032\002\uffc7\003\uffc7\004\uffc7\012\uffc7\013\uffc7" +
    "\016\uffc7\031\uffc7\033\uffc7\050\uffc7\051\uffc7\052\uffc7\055" +
    "\uffc7\001\002\000\004\047\165\001\002\000\032\002\uffcc" +
    "\003\uffcc\004\uffcc\012\uffcc\013\uffcc\016\uffcc\031\uffcc\033" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\001\002\000\032" +
    "\002\uffcf\003\uffcf\004\uffcf\012\uffcf\013\uffcf\016\uffcf\031" +
    "\uffcf\033\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002" +
    "\000\006\035\uffc0\040\205\001\002\000\006\035\uffc2\040" +
    "\203\001\002\000\032\002\uffc9\003\uffc9\004\uffc9\012\uffc9" +
    "\013\uffc9\016\uffc9\031\uffc9\033\uffc9\050\uffc9\051\uffc9\052" +
    "\uffc9\055\uffc9\001\002\000\006\035\uffc3\040\201\001\002" +
    "\000\006\035\uffc4\040\177\001\002\000\004\035\175\001" +
    "\002\000\004\047\176\001\002\000\032\002\uffcb\003\uffcb" +
    "\004\uffcb\012\uffcb\013\uffcb\016\uffcb\031\uffcb\033\uffcb\050" +
    "\uffcb\051\uffcb\052\uffcb\055\uffcb\001\002\000\012\055\173" +
    "\056\172\057\170\060\167\001\002\000\004\035\uffc1\001" +
    "\002\000\012\055\173\056\172\057\170\060\167\001\002" +
    "\000\004\035\uffbe\001\002\000\012\055\173\056\172\057" +
    "\170\060\167\001\002\000\004\035\uffbd\001\002\000\012" +
    "\055\173\056\172\057\170\060\167\001\002\000\004\035" +
    "\uffbf\001\002\000\032\002\uffa8\003\uffa8\004\uffa8\012\uffa8" +
    "\013\uffa8\016\uffa8\031\uffa8\033\uffa8\050\uffa8\051\uffa8\052" +
    "\uffa8\055\uffa8\001\002\000\006\055\212\060\211\001\002" +
    "\000\004\037\216\001\002\000\004\037\uffaa\001\002\000" +
    "\004\037\214\001\002\000\004\047\215\001\002\000\032" +
    "\002\uffa9\003\uffa9\004\uffa9\012\uffa9\013\uffa9\016\uffa9\031" +
    "\uffa9\033\uffa9\050\uffa9\051\uffa9\052\uffa9\055\uffa9\001\002" +
    "\000\004\047\217\001\002\000\032\002\uffab\003\uffab\004" +
    "\uffab\012\uffab\013\uffab\016\uffab\031\uffab\033\uffab\050\uffab" +
    "\051\uffab\052\uffab\055\uffab\001\002\000\034\002\uffeb\003" +
    "\uffeb\004\uffeb\012\uffeb\013\uffeb\016\uffeb\031\uffeb\033\uffeb" +
    "\044\242\050\uffeb\051\uffeb\052\uffeb\055\uffeb\001\002\000" +
    "\006\003\223\044\222\001\002\000\006\003\113\032\114" +
    "\001\002\000\032\002\uffea\003\uffea\004\uffea\012\uffea\013" +
    "\uffea\016\uffea\031\uffea\033\uffea\050\uffea\051\uffea\052\uffea" +
    "\055\uffea\001\002\000\036\002\uffee\003\uffee\004\uffee\010" +
    "\226\011\225\012\uffee\013\uffee\016\uffee\031\uffee\033\uffee" +
    "\050\uffee\051\uffee\052\uffee\055\uffee\001\002\000\006\003" +
    "\237\044\236\001\002\000\024\003\230\005\054\006\051" +
    "\015\064\021\046\036\052\055\053\056\050\057\060\001" +
    "\002\000\006\003\234\044\233\001\002\000\034\002\uffe3" +
    "\003\uffe3\004\uffe3\012\uffe3\013\uffe3\016\uffe3\031\uffe3\033" +
    "\uffe3\044\231\050\uffe3\051\uffe3\052\uffe3\055\uffe3\001\002" +
    "\000\006\003\113\032\114\001\002\000\032\002\uffe5\003" +
    "\uffe5\004\uffe5\012\uffe5\013\uffe5\016\uffe5\031\uffe5\033\uffe5" +
    "\050\uffe5\051\uffe5\052\uffe5\055\uffe5\001\002\000\006\003" +
    "\113\032\114\001\002\000\032\002\uffe4\003\uffe4\004\uffe4" +
    "\012\uffe4\013\uffe4\016\uffe4\031\uffe4\033\uffe4\050\uffe4\051" +
    "\uffe4\052\uffe4\055\uffe4\001\002\000\032\002\uffec\003\uffec" +
    "\004\uffec\012\uffec\013\uffec\016\uffec\031\uffec\033\uffec\050" +
    "\uffec\051\uffec\052\uffec\055\uffec\001\002\000\006\003\113" +
    "\032\114\001\002\000\006\003\113\032\114\001\002\000" +
    "\032\002\uffe6\003\uffe6\004\uffe6\012\uffe6\013\uffe6\016\uffe6" +
    "\031\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\001" +
    "\002\000\032\002\uffed\003\uffed\004\uffed\012\uffed\013\uffed" +
    "\016\uffed\031\uffed\033\uffed\050\uffed\051\uffed\052\uffed\055" +
    "\uffed\001\002\000\006\003\113\032\114\001\002\000\032" +
    "\002\uffe9\003\uffe9\004\uffe9\012\uffe9\013\uffe9\016\uffe9\031" +
    "\uffe9\033\uffe9\050\uffe9\051\uffe9\052\uffe9\055\uffe9\001\002" +
    "\000\032\002\uffa7\003\uffa7\004\uffa7\012\uffa7\013\uffa7\016" +
    "\uffa7\031\uffa7\033\uffa7\050\uffa7\051\uffa7\052\uffa7\055\uffa7" +
    "\001\002\000\006\055\247\060\246\001\002\000\004\037" +
    "\253\001\002\000\004\037\uffad\001\002\000\004\037\251" +
    "\001\002\000\004\047\252\001\002\000\032\002\uffac\003" +
    "\uffac\004\uffac\012\uffac\013\uffac\016\uffac\031\uffac\033\uffac" +
    "\050\uffac\051\uffac\052\uffac\055\uffac\001\002\000\004\047" +
    "\254\001\002\000\032\002\uffae\003\uffae\004\uffae\012\uffae" +
    "\013\uffae\016\uffae\031\uffae\033\uffae\050\uffae\051\uffae\052" +
    "\uffae\055\uffae\001\002\000\032\002\uffe8\003\uffe8\004\uffe8" +
    "\012\uffe8\013\uffe8\016\uffe8\031\uffe8\033\uffe8\050\uffe8\051" +
    "\uffe8\052\uffe8\055\uffe8\001\002\000\032\002\uffe7\003\uffe7" +
    "\004\uffe7\012\uffe7\013\uffe7\016\uffe7\031\uffe7\033\uffe7\050" +
    "\uffe7\051\uffe7\052\uffe7\055\uffe7\001\002\000\032\002\ufff7" +
    "\003\012\004\015\012\004\013\014\016\020\031\017\033" +
    "\ufff7\050\013\051\007\052\025\055\016\001\002\000\006" +
    "\002\ufff9\033\ufff9\001\002\000\004\002\001\001\002\000" +
    "\006\002\uffff\033\uffff\001\002\000\020\003\265\021\046" +
    "\036\100\055\065\056\050\057\060\060\264\001\002\000" +
    "\004\037\274\001\002\000\034\002\uffb6\003\uffb6\004\uffb6" +
    "\012\uffb6\013\uffb6\016\uffb6\031\uffb6\033\uffb6\037\uffb5\050" +
    "\uffb6\051\uffb6\052\uffb6\055\uffb6\001\002\000\010\020\074" +
    "\021\067\037\267\001\002\000\004\047\270\001\002\000" +
    "\032\002\uffba\003\uffba\004\uffba\012\uffba\013\uffba\016\uffba" +
    "\031\uffba\033\uffba\050\uffba\051\uffba\052\uffba\055\uffba\001" +
    "\002\000\004\037\272\001\002\000\004\047\273\001\002" +
    "\000\032\002\uffb4\003\uffb4\004\uffb4\012\uffb4\013\uffb4\016" +
    "\uffb4\031\uffb4\033\uffb4\050\uffb4\051\uffb4\052\uffb4\055\uffb4" +
    "\001\002\000\006\003\275\047\276\001\002\000\032\002" +
    "\uffb3\003\uffb3\004\uffb3\012\uffb3\013\uffb3\016\uffb3\031\uffb3" +
    "\033\uffb3\050\uffb3\051\uffb3\052\uffb3\055\uffb3\001\002\000" +
    "\032\002\uffb9\003\uffb9\004\uffb9\012\uffb9\013\uffb9\016\uffb9" +
    "\031\uffb9\033\uffb9\050\uffb9\051\uffb9\052\uffb9\055\uffb9\001" +
    "\002\000\006\002\ufffb\033\ufffb\001\002\000\006\002\ufffd" +
    "\033\ufffd\001\002\000\032\002\uffdf\003\uffdf\004\uffdf\012" +
    "\uffdf\013\uffdf\016\uffdf\031\uffdf\033\uffdf\050\uffdf\051\uffdf" +
    "\052\uffdf\055\uffdf\001\002\000\004\014\303\001\002\000" +
    "\006\003\304\046\305\001\002\000\034\002\uffd5\003\uffd5" +
    "\004\uffd5\012\uffd5\013\uffd5\016\uffd5\031\uffd5\033\uffd5\036" +
    "\uffde\050\uffd5\051\uffd5\052\uffd5\055\uffd5\001\002\000\006" +
    "\003\306\036\307\001\002\000\034\002\uffd2\003\uffd2\004" +
    "\uffd2\012\uffd2\013\uffd2\016\uffd2\031\uffd2\033\uffd2\044\uffd4" +
    "\050\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002\000\016\003" +
    "\310\021\046\036\100\055\065\056\050\057\060\001\002" +
    "\000\034\002\uffd6\003\uffd6\004\uffd6\012\uffd6\013\uffd6\016" +
    "\uffd6\031\uffd6\033\uffd6\037\uffd8\050\uffd6\051\uffd6\052\uffd6" +
    "\055\uffd6\001\002\000\012\003\313\020\074\021\067\037" +
    "\312\001\002\000\006\003\320\044\317\001\002\000\004" +
    "\044\uffda\001\002\000\004\044\315\001\002\000\006\003" +
    "\113\032\114\001\002\000\032\002\uffd9\003\uffd9\004\uffd9" +
    "\012\uffd9\013\uffd9\016\uffd9\031\uffd9\033\uffd9\050\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\001\002\000\006\003\113\032\114" +
    "\001\002\000\006\003\uffdc\032\uffdc\001\002\000\006\003" +
    "\113\032\114\001\002\000\032\002\uffdb\003\uffdb\004\uffdb" +
    "\012\uffdb\013\uffdb\016\uffdb\031\uffdb\033\uffdb\050\uffdb\051" +
    "\uffdb\052\uffdb\055\uffdb\001\002\000\032\002\uffe0\003\uffe0" +
    "\004\uffe0\012\uffe0\013\uffe0\016\uffe0\031\uffe0\033\uffe0\050" +
    "\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002\000\004\037\325" +
    "\001\002\000\004\044\326\001\002\000\006\003\113\032" +
    "\114\001\002\000\032\002\uffd7\003\uffd7\004\uffd7\012\uffd7" +
    "\013\uffd7\016\uffd7\031\uffd7\033\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\055\uffd7\001\002\000\004\044\331\001\002\000\006" +
    "\003\113\032\114\001\002\000\032\002\uffd3\003\uffd3\004" +
    "\uffd3\012\uffd3\013\uffd3\016\uffd3\031\uffd3\033\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\055\uffd3\001\002\000\004\036\334\001" +
    "\002\000\014\021\046\036\100\055\065\056\050\057\060" +
    "\001\002\000\010\020\074\021\067\037\336\001\002\000" +
    "\004\044\337\001\002\000\006\003\113\032\114\001\002" +
    "\000\032\002\uffdd\003\uffdd\004\uffdd\012\uffdd\013\uffdd\016" +
    "\uffdd\031\uffdd\033\uffdd\050\uffdd\051\uffdd\052\uffdd\055\uffdd" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\336\000\022\002\021\007\010\010\005\011\004\012" +
    "\020\013\022\015\007\016\023\001\001\000\002\001\001" +
    "\000\022\002\021\007\277\010\005\011\004\012\020\013" +
    "\022\015\007\016\023\001\001\000\022\002\021\007\276" +
    "\010\005\011\004\012\020\013\022\015\007\016\023\001" +
    "\001\000\002\001\001\000\022\002\021\007\261\010\005" +
    "\011\004\012\020\013\022\015\007\016\023\001\001\000" +
    "\002\001\001\000\004\032\256\001\001\000\002\001\001" +
    "\000\016\017\062\020\055\021\220\025\054\026\046\031" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\017\062\020\055\021\060\025\054\026" +
    "\046\031\061\001\001\000\022\002\021\007\044\010\005" +
    "\011\004\012\020\013\022\015\007\016\023\001\001\000" +
    "\022\002\021\007\043\010\005\011\004\012\020\013\022" +
    "\015\007\016\023\001\001\000\022\002\021\007\042\010" +
    "\005\011\004\012\020\013\022\015\007\016\023\001\001" +
    "\000\022\002\021\007\041\010\005\011\004\012\020\013" +
    "\022\015\007\016\023\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\043\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\017\125\020\124\025\054\026\046\031" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\075\001\001\000\012\017\062\025\065\026\046\031" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\110\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\026\103" +
    "\031\061\001\001\000\002\001\001\000\010\017\100\026" +
    "\046\031\061\001\001\000\002\001\001\000\010\017\101" +
    "\026\046\031\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\031\107" +
    "\001\001\000\004\031\106\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\114\001\001" +
    "\000\002\001\001\000\022\002\021\007\115\010\005\011" +
    "\004\012\020\013\022\015\007\016\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\017\062\025\123\026\046\031\061\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\120\001\001\000\004\024\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\016\157\017\153\020\156" +
    "\025\054\026\046\031\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\173\001\001\000\004\024\075\001\001\000\004" +
    "\040\163\001\001\000\004\041\161\001\001\000\004\023" +
    "\120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\177\001\001\000\002\001\001\000\004\006\201\001" +
    "\001\000\002\001\001\000\004\006\203\001\001\000\002" +
    "\001\001\000\004\006\205\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\212\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\223\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\062\020\055\021\226\025\054\026\046\031\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\231" +
    "\001\001\000\002\001\001\000\004\014\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\014\240\001\001" +
    "\000\004\014\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\014\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\044" +
    "\247\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\002\021\007\257\010\005" +
    "\011\004\012\020\013\022\015\007\016\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\017\265\026\046\031\061\001\001\000\002\001\001\000" +
    "\004\042\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\332" +
    "\001\001\000\002\001\001\000\004\037\327\001\001\000" +
    "\010\017\310\026\046\031\061\001\001\000\004\036\323" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\035" +
    "\313\001\001\000\002\001\001\000\004\014\315\001\001" +
    "\000\002\001\001\000\004\014\322\001\001\000\004\034" +
    "\320\001\001\000\004\014\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\326\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\331\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\017\334\026\046\031\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\337\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

Ventana.error("Error fatal, verifica que todas las instrucciones entre llaves '{}' esten cerradas, no se puede seguir analizando");


System.out.println(" ");
 }

public void syntax_error(Symbol s){
/* Ventana.error("ERROR SINTAXIS: Se encontro un error en la linea: "+(s.right+1)+" antes de: '"+s.value+"', revisa la estructura de tu programa en esa sección"); */
}



public void semantic(Symbol cur_token,String n)
{
System.out.println("Error Semantico ");
  }

public void report_error(String message, Object info){
	System.out.println(message);
}

public void semantic(String msg, Object obj) {
System.out.println(msg);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico$actions {


static boolean eval=true;

void print(String msj)
 
   {System.out.println(msj);}



  private final Sintactico parser;

  /** Constructor */
  CUP$Sintactico$actions(Sintactico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico$do_action(
    int                        CUP$Sintactico$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico$parser,
    java.util.Stack            CUP$Sintactico$stack,
    int                        CUP$Sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXP2 ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // EXP2 ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // EXP2 ::= EXP2 tmenos EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // EXP2 ::= EXP2 tentre EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // EXP2 ::= EXP2 tpor EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXP2 ::= EXP2 tmas EXP 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP2",21, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // FAC ::= tmenos treal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="-"+a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // FAC ::= tmenos tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="-"+a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // FAC ::= tmenos tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="-"+a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // FAC ::= treal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // FAC ::= tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // FAC ::= tid 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=t; /* TablaDS.ValidarTipo(t,tright+1,"Integer");*/
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // FAC ::= tabrep EXP tcierrap 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+a+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FAC",23, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // TERM ::= FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // TERM ::= TERM tentre FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+"/"+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // TERM ::= TERM tpor FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+"*"+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("TERM",20, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXP ::= TERM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=b+"";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXP ::= EXP tmenos TERM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+"-"+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXP ::= EXP tmas TERM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+"+"+b;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("EXP",13, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COND3 ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COND3 ::= COND3 OPREL COND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND3",1, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LOG ::= tfalse 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LOG ::= ttrue 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LOG ::= tnot COND3 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LOG ::= COND3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LOG ::= LOG OPL COND3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LOG",2, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // OPREL ::= tmenor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="<";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // OPREL ::= tmayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=">";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // OPREL ::= tigualmayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=">=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // OPREL ::= tigualmenor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="<=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OPREL ::= tdiferente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="!=";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OPREL ::= tigualque 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="==";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPREL",18, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // OPL ::= tor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="or";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // OPL ::= tand 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="and";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("OPL",17, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // REL ::= tnot REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="not "+a ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // REL ::= tfalse 
            {
              Object RESULT =null;
		RESULT="False";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // REL ::= ttrue 
            {
              Object RESULT =null;
		RESULT="True";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // REL ::= EXP OPREL EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+""+c+""+b; 

boolean x=true;

if(a.toString().matches("[a-zA-z]*") && b.toString().matches("[a-zA-z]*")){
String op1=TablaDS.ObtenerTipo(a);
String op2=TablaDS.ObtenerTipo(b);
	
	if(op1.equals("String") && op2.equals("String") && (c.toString().equals("==") || c.toString().equals("!=")))
		x=false;

}
	


if(x){
TablaDS.ValidarExTipo(a,aright+1,"Integer"); 
TablaDS.ValidarExTipo(b,bright+1,"Integer");}





              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // REL ::= tabrep COND tcierrap 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT="("+a+")";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("REL",19, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // COND ::= COND OPL tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // COND ::= REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a ;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // COND ::= COND OPL REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT=a+" "+b+" "+c; 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND",14, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ENT ::= tinput error 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="input"; Ventana.error("Error en la linea: "+(e15right+1)+", instruccion 'input' incompleta ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ENT ::= txinput error 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		RESULT="xinput"; Ventana.error("Error en la linea: "+(e15right+1)+", instruccion 'xinput' incompleta ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ENT ::= txinput tabrep tid NT$11 tcierrap tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$11
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // NT$11 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT="xinput";TablaDS.ValidarTipo(a,aright+1,"String"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$11",35, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ENT ::= txinput tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		RESULT="xinput";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ENT ::= tinput tabrep tid NT$10 tcierrap tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$10
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // NT$10 ::= 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
RESULT="input";TablaDS.ValidarTipo(a,aright+1,"String"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$10",34, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ENT ::= tinput tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		RESULT="input";
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ENT",12, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SAL ::= tstr tabrep tstring tcierrap error 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e15right+1)+", hace falta un ';' en una instruccion 'str' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SAL ::= tstr tabrep error 
            {
              Object RESULT =null;
		int e12left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e12right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e12 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e12right+1)+", hay instrucción 'str' incorrecta. Verifica su estructura y que haya un ';' al final ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SAL ::= tstr tabrep error NT$9 tcierrap tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$9
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // NT$9 ::= 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e15right+1)+", parametro invalido en el 'str', solo se aceptan Strings ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$9",33, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SAL ::= tprint tabrep tstring tcierrap error 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e15right+1)+", hace falta un ';' en una instruccion 'print' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // SAL ::= tprint tabrep error NT$8 tcierrap tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // NT$8 ::= 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e15right+1)+", expresion entre parentesis no valida en en el 'print' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$8",32, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // SAL ::= tprint tabrep error 
            {
              Object RESULT =null;
		int e11left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e11right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e11 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e11right+1)+", hay instrucción 'print' incorrecta. Verifica su estructura y que haya un ';' al final");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // SAL ::= tstr tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SAL ::= tstr tabrep tid tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		TablaDS.ValidarTipo(a,aright+1,"String");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SAL ::= tprint tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SAL ::= tprint tabrep EXP tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		TablaDS.ValidarExTipo(a,aright+1,"Num");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SAL",11, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ABRECIERRA ::= error 
            {
              Object RESULT =null;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e2 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e2right+1)+", Se esperan las instrucciones entre dos corchetes '{}' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ABRECIERRA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ABRECIERRA ::= tabre SINT tcierra 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ABRECIERRA",10, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // CORC ::= treal tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // CORC ::= tint tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CORC ::= tstring tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CORC ::= tstring 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CORC ::= tid tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CORC ::= treal 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CORC ::= tint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CORC ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("CORC",4, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ASIG ::= tid tigual ENT 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		
if(q.toString().equals("xinput"))
TablaDS.Insertar("Integer",h,0,"tipo","");
else
TablaDS.Insertar("String",h,0,"tipo","");

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ASIG ::= tigual error 
            {
              Object RESULT =null;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e15right+1)+", uso incorrecto de '=' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ASIG ::= tid tigual error NT$7 tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$7 ::= 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e15right+1)+", asignación a '"+h+"'' no valida");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$7",31, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ASIG ::= tid tigual tabrec error 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int e15left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e15right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e15 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e15right+1)+", la estructura de la declaracion de la lista '"+a+"' no es valida ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ASIG ::= tid tigual error 
            {
              Object RESULT =null;
		int e6left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e6right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e6 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e6right+1)+", hacen falta ';' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ASIG ::= tid tigual tabrec CORC tcierrac tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		TablaDS.Insertar("Lista",h,0,"tipo","");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ASIG ::= tid tigual tstring NT$6 tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int hueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String hue = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$6 ::= 
            {
              Object RESULT =null;
		int hueleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hueright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String hue = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
TablaDS.Insertar("String",hue,0,"tipo",""); TablaDS.Insertar(q,hue,hueright+1,"valor","String");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$6",30, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ASIG ::= tid tigual COND tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		TablaDS.Insertar("Boolean",h,0,"tipo",""); print(h.getClass().getSimpleName()); TablaDS.Insertar(q,h,hright+1,"valor","Boolean");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ASIG ::= tid tigual EXP tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
if(q!=null)if(!q.toString().matches("[a-zA-z]*"))TablaDS.ValidarExTipo(q,hright+1,"Num");
TablaDS.Insertar("Integer",h,0,"tipo","");TablaDS.Insertar(q,h,hright+1,"valor","Num");  
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("ASIG",9, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // A ::= tint 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // A ::= tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		TablaDS.ValidarTipo(a,aright+1,"Integer");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("A",3, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FOR ::= tfor tint tin trange error 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la expresion entre parentesis: 'range(expresion)' despues de 'in'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FOR ::= tfor tint tin trange error NT$5 tpuntos ABRECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NT$5 ::= 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la expresion entre parentesis: 'range(expresion)' despues de 'in'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$5",29, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FOR ::= tfor tint tin error 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la palabra 'range' despues de 'in'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FOR ::= tfor tint tin trange tabrep error 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta 'expresion' en la estructura 'range(expresion)'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FOR ::= tfor tint tin trange tabrep error NT$4 tcierrap tpuntos ABRECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NT$4 ::= 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta 'expresion' en la estructura 'range(expresion)'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$4",28, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FOR ::= tfor tint tin trange tabrep EXP error NT$3 tpuntos ABRECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$3 ::= 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta ')' despues de 'range(expresion'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$3",27, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // FOR ::= tfor tint tin trange tabrep EXP tcierrap error NT$2 ABRECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$2 ::= 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta ':' despues de 'range(expresion)'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$2",26, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // FOR ::= tfor tint tin error NT$1 tabrep EXP tcierrap tpuntos ABRECIERRA 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)).value;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-9)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // NT$1 ::= 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, hace falta la palabra 'range' despues de 'in'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$1",25, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // FOR ::= tfor error 
            {
              Object RESULT =null;
		int e9left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e9right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e9 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e9right+1)+", estructura incorrecta de un ciclo for, se esperaba un entero despues de 'for', revise su código");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FOR ::= tfor tint tin trange tabrep EXP tcierrap tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)).value;
		TablaDS.ValidarExTipo(q,qright+1,"Integer");
if(h.toString().equals("0"))
Ventana.error("Error en la linea: "+(hright+1)+", estructura incorrecta de un ciclo for, el '0' no esta permitido alli, revise su código");

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("FOR",8, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // WHI ::= twhile error 
            {
              Object RESULT =null;
		int e8left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e8right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e8 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e8right+1)+", falta la condicion seguido de sus respectivos ':' en un ciclo while ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHI",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // WHI ::= twhile COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("WHI",7, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // IF ::= tif COND2 tpuntos ABRECIERRA telif error 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", faltan la condicion seguido de ':' en un elif ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // IF ::= tif COND2 tpuntos ABRECIERRA telif COND2 error 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", faltan los ':' en un elif ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // IF ::= tif COND2 tpuntos ABRECIERRA telif error tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", condicion invalida en un 'elif' ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // IF ::= tif COND2 tpuntos ABRECIERRA telse error ABRECIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", falta los puntos  ':' en un else ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IF ::= error telif 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", Hay un 'elif' sin un if ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= error telse 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", Hay un 'else' sin un if ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= tif error tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", condicion invalida en un if ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= tif COND2 error 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", faltan los ':' en un if ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= tif error 
            {
              Object RESULT =null;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", falta la condicion seguido de sus respectivos ':' en un if ");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= tif COND2 tpuntos ABRECIERRA telif COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IF ::= tif COND2 tpuntos ABRECIERRA telse tpuntos ABRECIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IF ::= tif COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("IF",6, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // COND2 ::= tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		TablaDS.ValidarTipo(a,aright+1,"Boolean");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // COND2 ::= COND 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("COND2",15, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LISTA ::= tid txarray error 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", declaración inválida del arreglo '"+h+"'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LISTA ::= tid tarray error 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e3 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
		Ventana.error("Error en la linea: "+(e3right+1)+", declaración inválida del arreglo '"+h+"'");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LISTA ::= tid txarray tfor tid tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
   TablaDS.Insertar("Integer",h,0,"tipo",""); TablaDS.ValidarTipo(a,aright+1,"Integer"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LISTA ::= tid tarray tfor tid tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		
   TablaDS.Insertar("String",h,0,"tipo",""); TablaDS.ValidarTipo(a,aright+1,"Integer"); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LISTA ::= tid txarray tfor tint tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 TablaDS.Insertar("Integer",h,0,"tipo",""); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LISTA ::= tid tarray tfor tint tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)).value;
		 TablaDS.Insertar("String",h,0,"tipo",""); 
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("LISTA",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SINT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SINT ::= LISTA SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SINT ::= error NT$0 SINT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)).value;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$0 ::= 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.peek()).value;
Ventana.error("Error en la linea: "+(e1right+1)+", existe una instrucción inválida en la linea, revisa tu código");
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("NT$0",24, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SINT ::= IF SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SINT ::= FOR SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SINT ::= WHI SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SINT ::= ENT SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SINT ::= SAL SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SINT ::= ASIG SINT 
            {
              Object RESULT =null;

              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("SINT",5, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          return CUP$Sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SINT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico$stack.elementAt(CUP$Sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico$parser.done_parsing();
          return CUP$Sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

