
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Nov 24 16:05:17 MST 2015
//----------------------------------------------------

package NohtypPackage;

import java.io.*;
import java.lang.*;
import java_cup.runtime.*;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Nov 24 16:05:17 MST 2015
  */
public class Sintactico2 extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintactico2() {super();}

  /** Constructor which sets the default scanner. */
  public Sintactico2(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintactico2(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\134\000\002\002\004\000\002\010\004\000\002\010" +
    "\004\000\002\010\004\000\002\010\004\000\002\010\004" +
    "\000\002\010\004\000\002\010\004\000\002\010\002\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\002\000\002\003\007\000\002\003\007" +
    "\000\002\003\007\000\002\003\007\000\002\022\003\000" +
    "\002\022\003\000\002\011\006\000\002\011\011\000\002" +
    "\011\012\000\002\012\006\000\002\013\013\000\002\006" +
    "\003\000\002\006\003\000\002\014\006\000\002\014\006" +
    "\000\002\033\002\000\002\014\007\000\002\014\010\000" +
    "\002\014\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\005\000\002\007\003\000\002\007" +
    "\005\000\002\015\005\000\002\016\007\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\017\007\000" +
    "\002\017\007\000\002\017\007\000\002\017\007\000\002" +
    "\021\005\000\002\021\003\000\002\026\005\000\002\026" +
    "\005\000\002\026\003\000\002\026\003\000\002\026\004" +
    "\000\002\024\003\000\002\024\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\003\000\002\005\005\000\002\005" +
    "\003\000\002\005\004\000\002\005\003\000\002\005\003" +
    "\000\002\004\005\000\002\004\003\000\002\020\005\000" +
    "\002\020\005\000\002\020\003\000\002\027\005\000\002" +
    "\027\005\000\002\027\003\000\002\032\005\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\004" +
    "\000\002\032\004\000\002\032\004\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\003\000\002\030\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\024\002\ufff9\004\016\012\010\013\007\016" +
    "\023\050\012\051\021\052\015\055\013\001\002\000\024" +
    "\002\ufff9\004\016\012\010\013\007\016\023\050\012\051" +
    "\021\052\015\055\013\001\002\000\024\002\ufff9\004\016" +
    "\012\010\013\007\016\023\050\012\051\021\052\015\055" +
    "\013\001\002\000\024\002\ufff9\004\016\012\010\013\007" +
    "\016\023\050\012\051\021\052\015\055\013\001\002\000" +
    "\022\005\032\006\031\015\041\021\024\036\030\055\027" +
    "\056\026\057\037\001\002\000\006\055\230\056\227\001" +
    "\002\000\024\002\ufff9\004\016\012\010\013\007\016\023" +
    "\050\012\051\021\052\015\055\013\001\002\000\004\036" +
    "\216\001\002\000\010\031\156\053\157\054\155\001\002" +
    "\000\004\002\154\001\002\000\004\036\145\001\002\000" +
    "\004\036\136\001\002\000\024\002\ufff9\004\016\012\010" +
    "\013\007\016\023\050\012\051\021\052\015\055\013\001" +
    "\002\000\024\002\ufff9\004\016\012\010\013\007\016\023" +
    "\050\012\051\021\052\015\055\013\001\002\000\004\036" +
    "\125\001\002\000\024\002\ufff9\004\016\012\010\013\007" +
    "\016\023\050\012\051\021\052\015\055\013\001\002\000" +
    "\022\005\032\006\031\015\041\021\024\036\030\055\027" +
    "\056\026\057\037\001\002\000\010\055\123\056\122\057" +
    "\121\001\002\000\040\007\uffb6\020\uffb6\021\uffb6\022\063" +
    "\023\062\025\uffb6\026\uffb6\027\uffb6\030\uffb6\037\uffb6\041" +
    "\uffb6\042\uffb6\043\uffb6\044\uffb6\047\uffb6\001\002\000\040" +
    "\007\uffb0\020\uffb0\021\uffb0\022\uffb0\023\uffb0\025\uffb0\026" +
    "\uffb0\027\uffb0\030\uffb0\037\uffb0\041\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\047\uffb0\001\002\000\030\020\uffb1\021\uffb1\022" +
    "\uffb1\023\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\042\uffb1" +
    "\043\uffb1\044\uffeb\001\002\000\022\005\032\006\031\015" +
    "\041\021\024\036\030\055\042\056\026\057\037\001\002" +
    "\000\014\007\uffca\037\uffca\041\uffca\044\uffca\047\uffca\001" +
    "\002\000\014\007\uffc9\037\uffc9\041\uffc9\044\uffc9\047\uffc9" +
    "\001\002\000\014\007\uffcd\037\uffcd\041\uffcd\044\uffcd\047" +
    "\uffcd\001\002\000\010\007\114\041\112\044\uffec\001\002" +
    "\000\040\007\uffb3\020\uffb3\021\uffb3\022\uffb3\023\uffb3\025" +
    "\uffb3\026\uffb3\027\uffb3\030\uffb3\037\uffb3\041\uffb3\042\uffb3" +
    "\043\uffb3\044\uffb3\047\uffb3\001\002\000\004\044\067\001" +
    "\002\000\040\007\uffaf\020\uffaf\021\uffaf\022\uffaf\023\uffaf" +
    "\025\uffaf\026\uffaf\027\uffaf\030\uffaf\037\uffaf\041\uffaf\042" +
    "\uffaf\043\uffaf\044\uffaf\047\uffaf\001\002\000\022\020\051" +
    "\021\044\025\054\026\047\027\052\030\046\042\045\043" +
    "\050\001\002\000\022\005\032\006\031\015\041\021\024" +
    "\036\030\055\042\056\026\057\037\001\002\000\040\007" +
    "\uffb1\020\uffb1\021\uffb1\022\uffb1\023\uffb1\025\uffb1\026\uffb1" +
    "\027\uffb1\030\uffb1\037\uffb1\041\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\047\uffb1\001\002\000\014\007\uffc8\037\uffc8\041\uffc8" +
    "\044\uffc8\047\uffc8\001\002\000\014\021\024\036\055\055" +
    "\042\056\026\057\037\001\002\000\014\021\uffc0\036\uffc0" +
    "\055\uffc0\056\uffc0\057\uffc0\001\002\000\014\021\uffc2\036" +
    "\uffc2\055\uffc2\056\uffc2\057\uffc2\001\002\000\014\021\uffc4" +
    "\036\uffc4\055\uffc4\056\uffc4\057\uffc4\001\002\000\014\021" +
    "\uffc1\036\uffc1\055\uffc1\056\uffc1\057\uffc1\001\002\000\014" +
    "\021\024\036\055\055\042\056\026\057\037\001\002\000" +
    "\014\021\uffc3\036\uffc3\055\uffc3\056\uffc3\057\uffc3\001\002" +
    "\000\014\021\024\036\055\055\042\056\026\057\037\001" +
    "\002\000\014\021\uffc5\036\uffc5\055\uffc5\056\uffc5\057\uffc5" +
    "\001\002\000\014\021\024\036\055\055\042\056\026\057" +
    "\037\001\002\000\020\007\uffcb\020\051\021\044\037\uffcb" +
    "\041\uffcb\044\uffcb\047\uffcb\001\002\000\010\020\051\021" +
    "\044\037\060\001\002\000\040\007\uffb2\020\uffb2\021\uffb2" +
    "\022\uffb2\023\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\037" +
    "\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\047\uffb2\001\002" +
    "\000\040\007\uffb8\020\uffb8\021\uffb8\022\063\023\062\025" +
    "\uffb8\026\uffb8\027\uffb8\030\uffb8\037\uffb8\041\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\047\uffb8\001\002\000\014\021\024\036" +
    "\055\055\042\056\026\057\037\001\002\000\014\021\024" +
    "\036\055\055\042\056\026\057\037\001\002\000\040\007" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\025\uffb5\026\uffb5" +
    "\027\uffb5\030\uffb5\037\uffb5\041\uffb5\042\uffb5\043\uffb5\044" +
    "\uffb5\047\uffb5\001\002\000\040\007\uffb4\020\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\037" +
    "\uffb4\041\uffb4\042\uffb4\043\uffb4\044\uffb4\047\uffb4\001\002" +
    "\000\040\007\uffb7\020\uffb7\021\uffb7\022\063\023\062\025" +
    "\uffb7\026\uffb7\027\uffb7\030\uffb7\037\uffb7\041\uffb7\042\uffb7" +
    "\043\uffb7\044\uffb7\047\uffb7\001\002\000\004\032\070\001" +
    "\002\000\024\004\016\012\010\013\007\016\023\033\ufff1" +
    "\050\012\051\021\052\015\055\013\001\002\000\026\002" +
    "\uffe7\004\uffe7\012\uffe7\013\uffe7\016\uffe7\033\uffe7\050\uffe7" +
    "\051\uffe7\052\uffe7\055\uffe7\001\002\000\004\033\111\001" +
    "\002\000\024\004\016\012\010\013\007\016\023\033\ufff1" +
    "\050\012\051\021\052\015\055\013\001\002\000\024\004" +
    "\016\012\010\013\007\016\023\033\ufff1\050\012\051\021" +
    "\052\015\055\013\001\002\000\024\004\016\012\010\013" +
    "\007\016\023\033\ufff1\050\012\051\021\052\015\055\013" +
    "\001\002\000\024\004\016\012\010\013\007\016\023\033" +
    "\ufff1\050\012\051\021\052\015\055\013\001\002\000\024" +
    "\004\016\012\010\013\007\016\023\033\ufff1\050\012\051" +
    "\021\052\015\055\013\001\002\000\024\004\016\012\010" +
    "\013\007\016\023\033\ufff1\050\012\051\021\052\015\055" +
    "\013\001\002\000\024\004\016\012\010\013\007\016\023" +
    "\033\ufff1\050\012\051\021\052\015\055\013\001\002\000" +
    "\004\033\ufff5\001\002\000\004\033\ufff8\001\002\000\004" +
    "\033\ufff3\001\002\000\004\033\ufff2\001\002\000\004\033" +
    "\ufff6\001\002\000\004\033\ufff4\001\002\000\004\033\ufff7" +
    "\001\002\000\032\002\uffd7\004\uffd7\010\uffd7\011\uffd7\012" +
    "\uffd7\013\uffd7\016\uffd7\033\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\055\uffd7\001\002\000\022\005\uffc6\006\uffc6\015\uffc6\021" +
    "\uffc6\036\uffc6\055\uffc6\056\uffc6\057\uffc6\001\002\000\022" +
    "\005\032\006\031\015\041\021\024\036\030\055\042\056" +
    "\026\057\037\001\002\000\022\005\uffc7\006\uffc7\015\uffc7" +
    "\021\uffc7\036\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000" +
    "\014\007\uffce\037\uffce\041\uffce\044\uffce\047\uffce\001\002" +
    "\000\010\007\114\037\120\041\112\001\002\000\024\020" +
    "\051\021\044\025\054\026\047\027\052\030\046\037\060" +
    "\042\045\043\050\001\002\000\014\007\uffcc\037\uffcc\041" +
    "\uffcc\044\uffcc\047\uffcc\001\002\000\040\007\uffac\020\uffac" +
    "\021\uffac\022\uffac\023\uffac\025\uffac\026\uffac\027\uffac\030" +
    "\uffac\037\uffac\041\uffac\042\uffac\043\uffac\044\uffac\047\uffac" +
    "\001\002\000\040\007\uffad\020\uffad\021\uffad\022\uffad\023" +
    "\uffad\025\uffad\026\uffad\027\uffad\030\uffad\037\uffad\041\uffad" +
    "\042\uffad\043\uffad\044\uffad\047\uffad\001\002\000\040\007" +
    "\uffae\020\uffae\021\uffae\022\uffae\023\uffae\025\uffae\026\uffae" +
    "\027\uffae\030\uffae\037\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\047\uffae\001\002\000\004\002\ufffd\001\002\000\016" +
    "\021\024\036\055\055\042\056\026\057\037\060\126\001" +
    "\002\000\004\037\132\001\002\000\010\020\051\021\044" +
    "\037\130\001\002\000\004\047\131\001\002\000\026\002" +
    "\uffd6\004\uffd6\012\uffd6\013\uffd6\016\uffd6\033\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\055\uffd6\001\002\000\004\047\133\001" +
    "\002\000\026\002\uffd5\004\uffd5\012\uffd5\013\uffd5\016\uffd5" +
    "\033\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5\001\002\000" +
    "\004\002\000\001\002\000\004\002\ufffb\001\002\000\006" +
    "\055\140\060\137\001\002\000\004\037\143\001\002\000" +
    "\004\037\141\001\002\000\004\047\142\001\002\000\026" +
    "\002\uffcf\004\uffcf\012\uffcf\013\uffcf\016\uffcf\033\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\055\uffcf\001\002\000\004\047\144" +
    "\001\002\000\026\002\uffd0\004\uffd0\012\uffd0\013\uffd0\016" +
    "\uffd0\033\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\001\002" +
    "\000\006\055\147\060\146\001\002\000\004\037\152\001" +
    "\002\000\004\037\150\001\002\000\004\047\151\001\002" +
    "\000\026\002\uffd4\004\uffd4\012\uffd4\013\uffd4\016\uffd4\033" +
    "\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\001\002\000\004" +
    "\047\153\001\002\000\026\002\uffd3\004\uffd3\012\uffd3\013" +
    "\uffd3\016\uffd3\033\uffd3\050\uffd3\051\uffd3\052\uffd3\055\uffd3" +
    "\001\002\000\004\002\001\001\002\000\004\012\211\001" +
    "\002\000\032\004\016\005\032\006\031\015\041\021\024" +
    "\034\165\036\030\050\012\055\042\056\026\057\037\060" +
    "\167\001\002\000\004\012\160\001\002\000\006\055\162" +
    "\056\161\001\002\000\004\047\164\001\002\000\004\047" +
    "\163\001\002\000\026\002\uffee\004\uffee\012\uffee\013\uffee" +
    "\016\uffee\033\uffee\050\uffee\051\uffee\052\uffee\055\uffee\001" +
    "\002\000\026\002\ufff0\004\ufff0\012\ufff0\013\ufff0\016\ufff0" +
    "\033\ufff0\050\ufff0\051\ufff0\052\ufff0\055\ufff0\001\002\000" +
    "\012\055\201\056\200\057\177\060\176\001\002\000\024" +
    "\020\051\021\044\025\054\026\047\027\052\030\046\042" +
    "\045\043\050\047\175\001\002\000\004\047\uffe1\001\002" +
    "\000\010\007\114\041\112\047\172\001\002\000\026\002" +
    "\uffde\004\uffde\012\uffde\013\uffde\016\uffde\033\uffde\050\uffde" +
    "\051\uffde\052\uffde\055\uffde\001\002\000\026\002\uffe2\004" +
    "\uffe2\012\uffe2\013\uffe2\016\uffe2\033\uffe2\050\uffe2\051\uffe2" +
    "\052\uffe2\055\uffe2\001\002\000\004\047\174\001\002\000" +
    "\026\002\uffe0\004\uffe0\012\uffe0\013\uffe0\016\uffe0\033\uffe0" +
    "\050\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002\000\026\002" +
    "\uffe3\004\uffe3\012\uffe3\013\uffe3\016\uffe3\033\uffe3\050\uffe3" +
    "\051\uffe3\052\uffe3\055\uffe3\001\002\000\006\035\uffd9\040" +
    "\207\001\002\000\004\035\uffdb\001\002\000\004\035\uffdc" +
    "\001\002\000\006\035\uffdd\040\205\001\002\000\004\035" +
    "\203\001\002\000\004\047\204\001\002\000\026\002\uffdf" +
    "\004\uffdf\012\uffdf\013\uffdf\016\uffdf\033\uffdf\050\uffdf\051" +
    "\uffdf\052\uffdf\055\uffdf\001\002\000\012\055\201\056\200" +
    "\057\177\060\176\001\002\000\004\035\uffda\001\002\000" +
    "\012\055\201\056\200\057\177\060\176\001\002\000\004" +
    "\035\uffd8\001\002\000\006\055\213\056\212\001\002\000" +
    "\004\047\215\001\002\000\004\047\214\001\002\000\026" +
    "\002\uffed\004\uffed\012\uffed\013\uffed\016\uffed\033\uffed\050" +
    "\uffed\051\uffed\052\uffed\055\uffed\001\002\000\026\002\uffef" +
    "\004\uffef\012\uffef\013\uffef\016\uffef\033\uffef\050\uffef\051" +
    "\uffef\052\uffef\055\uffef\001\002\000\006\055\220\060\217" +
    "\001\002\000\004\037\223\001\002\000\004\037\221\001" +
    "\002\000\004\047\222\001\002\000\026\002\uffd1\004\uffd1" +
    "\012\uffd1\013\uffd1\016\uffd1\033\uffd1\050\uffd1\051\uffd1\052" +
    "\uffd1\055\uffd1\001\002\000\004\047\224\001\002\000\026" +
    "\002\uffd2\004\uffd2\012\uffd2\013\uffd2\016\uffd2\033\uffd2\050" +
    "\uffd2\051\uffd2\052\uffd2\055\uffd2\001\002\000\004\002\ufffa" +
    "\001\002\000\004\014\231\001\002\000\004\014\uffe4\001" +
    "\002\000\004\014\uffe5\001\002\000\004\046\232\001\002" +
    "\000\004\036\233\001\002\000\014\021\024\036\055\055" +
    "\042\056\026\057\037\001\002\000\010\020\051\021\044" +
    "\037\235\001\002\000\004\044\236\001\002\000\004\032" +
    "\070\001\002\000\026\002\uffe6\004\uffe6\012\uffe6\013\uffe6" +
    "\016\uffe6\033\uffe6\050\uffe6\051\uffe6\052\uffe6\055\uffe6\001" +
    "\002\000\004\044\241\001\002\000\004\032\070\001\002" +
    "\000\032\002\uffea\004\uffea\010\244\011\243\012\uffea\013" +
    "\uffea\016\uffea\033\uffea\050\uffea\051\uffea\052\uffea\055\uffea" +
    "\001\002\000\004\044\250\001\002\000\022\005\032\006" +
    "\031\015\041\021\024\036\030\055\027\056\026\057\037" +
    "\001\002\000\004\044\246\001\002\000\004\032\070\001" +
    "\002\000\026\002\uffe8\004\uffe8\012\uffe8\013\uffe8\016\uffe8" +
    "\033\uffe8\050\uffe8\051\uffe8\052\uffe8\055\uffe8\001\002\000" +
    "\004\032\070\001\002\000\026\002\uffe9\004\uffe9\012\uffe9" +
    "\013\uffe9\016\uffe9\033\uffe9\050\uffe9\051\uffe9\052\uffe9\055" +
    "\uffe9\001\002\000\004\002\ufffe\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\252\000\022\003\010\010\013\011\016\012\021\013" +
    "\004\014\017\016\003\017\005\001\001\000\022\003\010" +
    "\010\253\011\016\012\021\013\004\014\017\016\003\017" +
    "\005\001\001\000\022\003\010\010\252\011\016\012\021" +
    "\013\004\014\017\016\003\017\005\001\001\000\022\003" +
    "\010\010\251\011\016\012\021\013\004\014\017\016\003" +
    "\017\005\001\001\000\016\020\037\021\033\022\237\026" +
    "\032\027\024\032\034\001\001\000\004\006\225\001\001" +
    "\000\022\003\010\010\224\011\016\012\021\013\004\014" +
    "\017\016\003\017\005\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\003\010\010\134\011\016\012\021\013\004" +
    "\014\017\016\003\017\005\001\001\000\022\003\010\010" +
    "\133\011\016\012\021\013\004\014\017\016\003\017\005" +
    "\001\001\000\002\001\001\000\022\003\010\010\123\011" +
    "\016\012\021\013\004\014\017\016\003\017\005\001\001" +
    "\000\016\020\037\021\033\022\035\026\032\027\024\032" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\020\116\021\115\026" +
    "\032\027\024\032\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\052\001\001\000\012\020\037\026\042\027\024\032" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\065\032\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\060" +
    "\032\034\001\001\000\002\001\001\000\010\020\055\027" +
    "\024\032\034\001\001\000\002\001\001\000\010\020\056" +
    "\027\024\032\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\064" +
    "\001\001\000\004\032\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\070\001\001" +
    "\000\022\002\071\003\075\011\076\012\100\013\073\014" +
    "\077\016\072\017\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\002\107\003\075\011\076\012\100\013" +
    "\073\014\077\016\072\017\074\001\001\000\022\002\106" +
    "\003\075\011\076\012\100\013\073\014\077\016\072\017" +
    "\074\001\001\000\022\002\105\003\075\011\076\012\100" +
    "\013\073\014\077\016\072\017\074\001\001\000\022\002" +
    "\104\003\075\011\076\012\100\013\073\014\077\016\072" +
    "\017\074\001\001\000\022\002\103\003\075\011\076\012" +
    "\100\013\073\014\077\016\072\017\074\001\001\000\022" +
    "\002\102\003\075\011\076\012\100\013\073\014\077\016" +
    "\072\017\074\001\001\000\022\002\101\003\075\011\076" +
    "\012\100\013\073\014\077\016\072\017\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\020\037" +
    "\026\114\027\024\032\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\024\112\001\001\000\004\025\052" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\126" +
    "\027\024\032\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\017\170\020\165\021\167\026\032\027\024\032\034\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\201\001\001\000\004\025\052\001\001\000\004" +
    "\033\172\001\001\000\004\024\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\205\001\001\000" +
    "\002\001\001\000\004\007\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\020\233\027\024" +
    "\032\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\241\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\020\037\021\033\022\244\026\032\027\024" +
    "\032\034\001\001\000\002\001\001\000\004\015\246\001" +
    "\001\000\002\001\001\000\004\015\250\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintactico2$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintactico2$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintactico2$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}






public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{

Ventana.error("Error fatal, verifica que todas las llaves '{}' esten cerradas, no se puede seguir analizando");


System.out.println(" ");
 }

public void syntax_error(Symbol s){
/* Ventana.error("ERROR SINTAXIS: Se encontro un error en la linea: "+(s.right+1)+" antes de: '"+s.value+"', revisa la estructura de tu programa en esa sección"); */
}



public void semantic(Symbol cur_token,String n)
{
System.out.println("Error Semantico ");
  }

public void report_error(String message, Object info){
	System.out.println(message);
}

public void semantic(String msg, Object obj) {
System.out.println(msg);
}


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintactico2$actions {


static boolean eval=true;

void print(String msj)
 
   {System.out.println(msj);}



  private final Sintactico2 parser;

  /** Constructor */
  CUP$Sintactico2$actions(Sintactico2 parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintactico2$do_action(
    int                        CUP$Sintactico2$act_num,
    java_cup.runtime.lr_parser CUP$Sintactico2$parser,
    java.util.Stack            CUP$Sintactico2$stack,
    int                        CUP$Sintactico2$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintactico2$result;

      /* select the action based on the action number */
      switch (CUP$Sintactico2$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXP2 ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXP2 ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP2 ::= EXP2 tmenos EXP 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP2 ::= EXP2 tentre EXP 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP2 ::= EXP2 tpor EXP 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP2 ::= EXP2 tmas EXP 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP2",22, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FAC ::= tmenos treal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("-"+a.toString(),"Real",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FAC ::= tmenos tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("-"+a.toString(),"Integer",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FAC ::= tmenos tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		


String tipo= TablaDS.ObtenerTipo(a);


RESULT=new Nodo("-"+a.toString(),tipo,null,null);

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FAC ::= treal 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo(a.toString(),"Real",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // FAC ::= tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo(a.toString(),"Integer",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FAC ::= tid 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

String tipo= TablaDS.ObtenerTipo(t);
RESULT=new Nodo(t.toString(),tipo,null,null);


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FAC ::= tabrep EXP tcierrap 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		RESULT=(Nodo) a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FAC",24, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TERM ::= FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=(Nodo) a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("TERM",21, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TERM ::= TERM tentre FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("/","Real",a,b);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("TERM",21, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TERM ::= TERM tpor FAC 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("*","Ope",a,b);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("TERM",21, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= TERM 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=(Nodo) b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= EXP tmenos TERM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("-","Ope",a,b);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= EXP tmas TERM 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo("+","Ope",a,b);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("EXP",14, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // COND3 ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND3",2, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // COND3 ::= COND3 OPREL COND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND3",2, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOG ::= tfalse 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LOG",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOG ::= ttrue 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LOG",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOG ::= tnot COND3 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LOG",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOG ::= COND3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LOG",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOG ::= LOG OPL COND3 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LOG",3, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // OPREL ::= tmenor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="<";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // OPREL ::= tmayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=">";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // OPREL ::= tigualmayor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=">=";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPREL ::= tigualmenor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="<=";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPREL ::= tdiferente 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="!=";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPREL ::= tigualque 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="==";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPREL",19, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPL ::= tor 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="Or";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPL",18, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPL ::= tand 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT="And";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("OPL",18, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // REL ::= tnot REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
Nodo temp= (Nodo) a;
temp.modV("not "+temp.valor);
RESULT= temp;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("REL",20, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // REL ::= tfalse 
            {
              Object RESULT =null;
		RESULT=new Nodo("False","Boolean",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("REL",20, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // REL ::= ttrue 
            {
              Object RESULT =null;
		RESULT=new Nodo("True","Boolean",null,null);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("REL",20, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // REL ::= EXP OPREL EXP 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

RESULT=new Nodo(c+"","Boolean",a,b);


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("REL",20, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // REL ::= tabrep COND tcierrap 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		RESULT=(Nodo) a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("REL",20, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // COND ::= REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=(Nodo) a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COND ::= COND OPL REL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=new Nodo(b+"","Boolean",a,c);
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND",15, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENT ::= txinput tabrep tid tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
String t="T"+TablaDS.x+"= "+a+"\n";
TablaDS.incx();
t=t+"print T"+(TablaDS.x-1)+"\n";
t=t+"T"+TablaDS.x+"= capturarteclado\n";
TablaDS.incx();
RESULT=t;



              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ENT",13, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ENT ::= txinput tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		
String t="T"+TablaDS.x+"= "+a+"\n";
TablaDS.incx();
t=t+"print T"+(TablaDS.x-1)+"\n";
t=t+"T"+TablaDS.x+"= capturarteclado\n";
TablaDS.incx();
RESULT=t;




              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ENT",13, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ENT ::= tinput tabrep tid tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

String t="T"+TablaDS.x+"= "+a+"\n";
TablaDS.incx();
t=t+"print T"+(TablaDS.x-1)+"\n";
t=t+"T"+TablaDS.x+"= capturarteclado\n";
TablaDS.incx();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ENT",13, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ENT ::= tinput tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

String t="T"+TablaDS.x+"= "+a+"\n";
TablaDS.incx();
t=t+"print T"+(TablaDS.x-1)+"\n";
t=t+"T"+TablaDS.x+"= capturarteclado\n";
TablaDS.incx();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ENT",13, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SAL ::= tstr tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

String t="T"+TablaDS.x+"= "+a+"\n";
RESULT=t+"printSTR T"+TablaDS.x+"\n";
TablaDS.incx();



              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SAL ::= tstr tabrep tid tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

String t="T"+TablaDS.x+"= "+q+"\n";
RESULT=t+"print T"+TablaDS.x+"\n";
TablaDS.incx();



              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SAL ::= tprint tabrep tstring tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

String t="T"+TablaDS.x+"= "+a+"\n";
RESULT=t+"print T"+TablaDS.x+"\n";
TablaDS.incx();


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SAL ::= tprint tabrep EXP tcierrap tpuntocoma 
            {
              Object RESULT =null;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		

Nodo temp= (Nodo) q;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");

String t=temp.cadtemp+"\n print "+te[0]+"\n";
RESULT=t;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SAL",12, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ABRECIERRA ::= tabre ESE tcierra 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ABRECIERRA",11, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CORC ::= tstring tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CORC ::= tstring 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CORC ::= tid tcoma CORC 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CORC ::= treal 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CORC ::= tint 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CORC ::= tid 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("CORC",5, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIG ::= tid tigual ENT 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

RESULT=q+h+"= T"+(TablaDS.x-1)+"\n";


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIG ::= tid tigual tabrec CORC tcierrac tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).value;
		
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIG ::= tid tigual tstring NT$0 tpuntocoma 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int hueleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int hueright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String hue = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // NT$0 ::= 
            {
              Object RESULT =null;
		int hueleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int hueright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		String hue = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String q = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;


RESULT=hue+"= "+q+"\n";


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("NT$0",25, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIG ::= tid tigual COND tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		

Nodo temp= (Nodo) q;
Nodo.postorden(temp); 
String[] t=temp.valorT.split("=");

RESULT=temp.cadtemp+h+"= "+t[0]+"\n";


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIG ::= tid tigual EXP tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		
Nodo temp= (Nodo) q;

Nodo.postorden(temp); 
String[] t=temp.valorT.split("=");

TablaDS.Dinamico.setValueAt(temp.tipo, TablaDS.Buscar(h), 1);

if(!temp.valorT.matches("\\-*[0-9]+|\\-*[0-9]+\\.[0-9]+"))
RESULT=temp.cadtemp+h+"= "+t[0]+"\n";

else
RESULT=h+"= "+t[0]+"\n";



              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ASIG",10, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // A ::= tint 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("A",4, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // A ::= tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("A",4, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FOR ::= tfor A tin trange tabrep EXP tcierrap tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)).value;
		int qleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		
Nodo temp= (Nodo) q;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");
String t="";
if(!temp.valorT.matches("\\-*[0-9]+|\\-*[0-9]+\\.[0-9]+"))
t=temp.cadtemp;
int e=TablaDS.x;
t=t+"T"+e+"= "+a+"\n";
TablaDS.incx();
t=t+"E"+TablaDS.y+": T"+TablaDS.x+"= "+"T"+e+" >= "+te[0]+"\n";
TablaDS.incy();
TablaDS.incx();
t=t+"sifalso T"+(TablaDS.x-1)+", E"+TablaDS.y+"\n";
t=t+c+"incrementar T"+e+"\nsaltar E"+(TablaDS.y-1)+"\nE"+TablaDS.y+": ";
TablaDS.incy();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("FOR",9, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-8)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // WHI ::= twhile COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

String t="";

t="E"+TablaDS.y+": ";

if(a.toString().matches("[a-zA-Z_][a-zA-Z0-9_]*")){
  t=t+"T"+TablaDS.x+"= "+a+"\n"+"sifalso "+"T"+TablaDS.x+", E"+(TablaDS.y+1)+"\n";
  TablaDS.incx();
}

else{
Nodo temp= (Nodo) a;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");

t=t+temp.cadtemp+"\n"+"sifalso "+te[0]+", E"+(TablaDS.y+1)+"\n";
}

t=t+b+"saltar "+"E"+TablaDS.y+"\n";
TablaDS.incy();
t=t+"E"+TablaDS.y+": ";
TablaDS.incy();
RESULT=t;



              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("WHI",8, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IF ::= tif COND2 tpuntos ABRECIERRA telif COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

String t="";

if(a.toString().matches("[a-zA-Z_][a-zA-Z0-9_]*")){
  t="T"+TablaDS.x+"= "+a+"\n"+"sifalso "+"T"+TablaDS.x+", E"+TablaDS.y+"\n";  /*salto a E1 elif*/
  TablaDS.incx();
}

else{
Nodo temp= (Nodo) a;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");    /*salto a E1 elif*/

t=temp.cadtemp+"\n"+"sifalso "+te[0]+", E"+TablaDS.y+"\n";
}

t=t+b+"saltar E"+(TablaDS.y+1)+"\n";   /*salto excluyendo elif E2*/
t=t+"E"+TablaDS.y+": ";               /*E1: */
TablaDS.incy();


if(d.toString().matches("[a-zA-Z_][a-zA-Z0-9_]*")){
  
t=t+"T"+TablaDS.x+"= "+d+"\n"+"sifalso "+"T"+TablaDS.x+", E"+TablaDS.y+"\n";  /*salto final*/
  TablaDS.incx();

}

else{
Nodo temp1= (Nodo) d;
Nodo.postorden(temp1); 
String[] te=temp1.valorT.split("=");    /*salto final*/

t=t+temp1.cadtemp+"\n"+"sifalso "+te[0]+", E"+TablaDS.y+"\n";
}

t=t+c+"E"+TablaDS.y+": ";
TablaDS.incy();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-7)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IF ::= tif COND2 tpuntos ABRECIERRA telse tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

String t="";

if(a.toString().matches("[a-zA-Z_][a-zA-Z0-9_]*")){
  t="T"+TablaDS.x+"= "+a+"\n"+"sifalso "+"T"+TablaDS.x+", E"+TablaDS.y+"\n";
  TablaDS.incx();
}

else{
Nodo temp= (Nodo) a;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");

t=temp.cadtemp+"\n"+"sifalso "+te[0]+", E"+TablaDS.y+"\n";
}

t=t+b+"saltar E"+(TablaDS.y+1)+"\n";
t=t+"E"+TablaDS.y+": ";
TablaDS.incy();
t=t+c+"E"+TablaDS.y+": ";
TablaDS.incy();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-6)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= tif COND2 tpuntos ABRECIERRA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		

String t="";

if(a.toString().matches("[a-zA-Z_][a-zA-Z0-9_]*")){
	t="T"+TablaDS.x+"= "+a+"\n"+"sifalso "+"T"+TablaDS.x+", E"+TablaDS.y+"\n";
	TablaDS.incx();
}

else{
Nodo temp= (Nodo) a;
Nodo.postorden(temp); 
String[] te=temp.valorT.split("=");

t=temp.cadtemp+"\n"+"sifalso "+te[0]+", E"+TablaDS.y+"\n";
}

t=t+b+"E"+TablaDS.y+": ";
TablaDS.incy();
RESULT=t;


              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-3)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // COND2 ::= tid 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND2",16, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COND2 ::= COND 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=(Nodo) a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("COND2",16, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA ::= tid txarray tfor tid tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		 RESULT="T"+TablaDS.x+"= "+a+"\narray Integer "+h+" of T"+TablaDS.x; TablaDS.incx();
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA ::= tid tarray tfor tid tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		 RESULT="T"+TablaDS.x+"= "+a+"\narray String "+h+" of T"+TablaDS.x; TablaDS.incx();
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA ::= tid txarray tfor tint tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		 RESULT="array Integer "+h+" of "+a; 
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LISTA ::= tid tarray tfor tint tpuntocoma 
            {
              Object RESULT =null;
		int hleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).right;
		String h = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		 RESULT="array String "+h+" of "+a;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("LISTA",1, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-4)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ESE ::= 
            {
              Object RESULT =null;
		RESULT="";
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ESE ::= LISTA ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ESE ::= IF ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ESE ::= FOR ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // ESE ::= WHI ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ESE ::= ENT ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ESE ::= SAL ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ESE ::= ASIG ESE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.peek()).value;
		RESULT=a+"\n"+b;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("ESE",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SINT ::= 
            {
              Object RESULT =null;

              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SINT ::= LISTA SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SINT ::= IF SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SINT ::= FOR SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SINT ::= WHI SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SINT ::= ENT SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SINT ::= SAL SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // SINT ::= ASIG SINT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		TablaDS.codinter=a+TablaDS.codinter;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("SINT",6, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          return CUP$Sintactico2$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= SINT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)).value;
		RESULT = start_val;
              CUP$Sintactico2$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.elementAt(CUP$Sintactico2$top-1)), ((java_cup.runtime.Symbol)CUP$Sintactico2$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintactico2$parser.done_parsing();
          return CUP$Sintactico2$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

